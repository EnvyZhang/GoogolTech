using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;

namespace GTN_Crd_Domo_CSharp
{
    public partial class Form1 : Form
    {
        //声明返回值
        public short rtn;

        bool aHead, newAhead, oldAhead, watchOn, axisFlag = false;

        public Form1()
        {
            InitializeComponent();
        }
        private void Form1_Load(object sender, EventArgs e)
        {
            COMBOBOX_AXISNUM.SelectedIndex = 0;
        }

        private void BUTTON_INITIAL_Click(object sender, EventArgs e)
        {
            short axis = Convert.ToInt16(COMBOBOX_AXISNUM.TabIndex + 1);
            rtn = GTN.mc.GTN_Open(0, 1);
            if (rtn != 0)
            {
                MessageBox.Show("开卡失败");
            }
            rtn = GTN.mc.GTN_Reset(1);
            rtn = GTN.mc.GTN_Reset(2);
            //for (short i = 1; i < 13; i++)
            //{
            //rtn = GTN.mc.GTN_LmtsOff(1, 1, i);
            //rtn = GTN.mc.GTN_AlarmOff(1, 1);
            //rtn = GTN.mc.GTN_LmtsOff(1, 2, i);
            //rtn = GTN.mc.GTN_AlarmOff(1, 2);
            //}
            rtn = GTN.mc.GTN_LoadConfig(1, "gtn_core1.cfg");
            if (rtn != 0)
            {
                MessageBox.Show("加载核1配置文件失败");
            }

            rtn = GTN.mc.GTN_LoadConfig(2, "gtn_core2.cfg");
            if (rtn != 0)
            {
                MessageBox.Show("加载核2配置文件失败");
            }

            rtn = GTN.mc.GTN_ClrSts(1, axis, 12);
            rtn = GTN.mc.GTN_ClrSts(2, axis, 12);
            rtn = GTN.mc.GTN_ZeroPos(1, axis, 12);
            rtn = GTN.mc.GTN_ZeroPos(2, axis, 12);

            BUTTON_INITIAL_COORDINATE.Enabled = true;
            textBox_SetExtAo.Text =Convert.ToString(5);
        }

        private void BUTTON_INITIAL_COORDINATE_Click(object sender, EventArgs e)
        {
        }

        private void BUTTON_LINEAR_MOTION_Click(object sender, EventArgs e)
        {
        }

        private void BUTTON_CLOSE_Click(object sender, EventArgs e)
        {
            rtn = GTN.mc.GTN_Stop(1, 0xFFF, 0xFFF); 
        }

        private void BUTTON_PTP_Click(object sender, EventArgs e)
        {
            short axis = Convert.ToInt16(COMBOBOX_AXISNUM.TabIndex + 1);
            GTN.mc.TTrapPrm trap;

            rtn = GTN.mc.GTN_PrfTrap(1, axis);
            rtn = GTN.mc.GTN_GetTrapPrm(1, axis, out trap);
            trap.acc = 0.5;
            trap.dec = 0.5;
            trap.smoothTime = 50;
            rtn = GTN.mc.GTN_SetTrapPrm(1, axis, ref trap);
            rtn = GTN.mc.GTN_SetVel(1, axis, 50);
            rtn = GTN.mc.GTN_SetPos(1, axis, 100000);
            rtn = GTN.mc.GTN_Update(1, 1 << (axis - 1));
        }

        private void BUTTON_HOME_Click(object sender, EventArgs e)
        {
            //程序演示了对第一个轴进行回原点的操作，用户可以同时完成多个轴的回原点操作。
            short axis = Convert.ToInt16(COMBOBOX_AXISNUM.TabIndex + 1);
            GTN.mc.THomePrm homeprm;
            rtn = GTN.mc.GTN_AxisOn(1, axis);
            rtn = GTN.mc.GTN_GetHomePrm(1, axis, out homeprm);//获取当前轴的回原点的参数
            homeprm.mode = 20;//home回原点模式
            homeprm.moveDir = 1;//1：正方向，-1：负方向
            homeprm.indexDir = 1;//1：正方向，-1：负方向
            homeprm.edge = 0;//设置捕获沿：0-下降沿，1-上升沿
            homeprm.velHigh = 5;
            homeprm.velLow = 1;
            homeprm.acc = 0.5;
            homeprm.dec = 0.5;
            homeprm.homeOffset = 0;//最终的停止位置相对于原点的偏移量
            homeprm.searchHomeDistance = 0;//Home最大搜索距离，0表示不限制搜索距离
            homeprm.searchIndexDistance = 30000;//Index最大搜索距离，0表示不限制搜索距离
            homeprm.escapeStep = 0;//采用限位回原点时，反方向离开限位的脱离步长

            rtn = GTN.mc.GTN_GoHome(1, axis, ref homeprm);//启动快速回原点
        }

        private void BUTTON_NJOG_MouseDown(object sender, MouseEventArgs e)
        {
            short axis = Convert.ToInt16(COMBOBOX_AXISNUM.SelectedIndex + 1);
            GTN.mc.TJogPrm jog;
            rtn = GTN.mc.GTN_PrfJog(1, axis);
            rtn = GTN.mc.GTN_GetJogPrm(1, axis, out jog);
            jog.acc = 0.5;
            jog.dec = 0.5;
            // 设置 Jog 运动参数
            rtn = GTN.mc.GTN_SetJogPrm(1, axis, ref jog);
            rtn = GTN.mc.GTN_SetVel(1, axis, -200);
            rtn = GTN.mc.GTN_Update(1, 1 << (axis - 1));
        }

        private void BUTTON_NJOG_MouseUp(object sender, MouseEventArgs e)
        {
            rtn = GTN.mc.GTN_Stop(1, 0xff, 0xff);
        }

        private void BUTTON_PJOG_MouseDown(object sender, MouseEventArgs e)
        {
            short axis = Convert.ToInt16(COMBOBOX_AXISNUM.SelectedIndex + 1);
            GTN.mc.TJogPrm jog;
            rtn = GTN.mc.GTN_PrfJog(1, axis);
            rtn = GTN.mc.GTN_GetJogPrm(1, axis, out jog);
            jog.acc = 0.5;
            jog.dec = 0.5;
            // 设置 Jog 运动参数
            rtn = GTN.mc.GTN_SetJogPrm(1, axis, ref jog);
            rtn = GTN.mc.GTN_SetVel(1, axis, 200);
            rtn = GTN.mc.GTN_Update(1, 1 << (axis - 1));
        }
        
        private void button_SetDoEx_Click(object sender, EventArgs e)
        {
            int pOutput = Convert.ToInt32(textBox_Output.Text);
            rtn = GTN.mc.GTN_SetDoEx(1, GTN.mc.MC_GPO, ref pOutput, 1);
        }

        private void button1_Click(object sender, EventArgs e)
        {
            short rtn;
            double pvalue = Convert.ToDouble(textBox_SetExtAo.Text);
            rtn = GTN.mc.GTN_ExtModuleInit(1,1);//初始化扩展模块
            rtn = GTN.mc.GTN_SetExtAo(1, 1, ref pvalue, 1);//设置核1第1路AO为5v
        }

        private void BUTTON_PJOG_MouseUp(object sender, MouseEventArgs e)
        {
            rtn = GTN.mc.GTN_Stop(1, 0xff, 0xff);
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            short run;
            int segment;
            int space;
            UInt32 pClock;
            double[] prfPos = new double[3];
            int[] sts = new int[6];
            GTN.mc.THomeStatus homests;

            rtn = GTN.mc.GTN_GetPrfPos(1, 1, out prfPos[0], 3, out pClock);       // 读1~3轴的规划位置
            rtn = GTN.mc.GT_CrdStatus(1, out run, out segment, 0);               // 读取坐标系运动状态
            rtn = GTN.mc.GTN_GetHomeStatus(1, 1, out homests);
            rtn = GTN.mc.GTN_CrdSpace(1, 1, out space, 0);
            //rtn = GTN.mc.GTN_GetSts(1, 1, out sts[0], 6, out pClock);
            //rtn = GTN.mc.GTN_GetUserSegNum(1, 1, out segment, 0);

            this.textBox_PrfPos1.Text = Math.Round(prfPos[0], 1).ToString();
            this.textBox_PrfPos2.Text = Math.Round(prfPos[1], 1).ToString();
            this.textBox_PrfPos3.Text = Math.Round(prfPos[2], 1).ToString();
            if (run == 0) { this.textBox_CrdStatus.Text = "静止"; }
            else { this.textBox_CrdStatus.Text = "运动"; }
            this.textBox_Segment.Text = Math.Round(segment * 1.00, 1).ToString();

            int[] pIntput = new int[2];                                           //声明一个长度为2的数组
            rtn = GTN.mc.GTN_GetDiEx(1, GTN.mc.MC_GPI, out pIntput[0], 2);        //当一个核中的DI数量大于32时，要将Count增加，Count数量取决于DI数
            this.textBox_GetDiEx1.Text = Convert.ToString(pIntput[0], 2);         //以2进制显示第一组di 
            this.textBox_GetDiEx2.Text = Convert.ToString(pIntput[1], 2);         //超过32位的di在第二个数组中显示
                                                                              
            double poutval, pinval;
            rtn = GTN.mc.GTN_GetExtAo(1, 1, out poutval, 1);                    //读取核1第1路AO
            rtn = GTN.mc.GTN_GetExtAi(1, 1, out pinval, 1);                     //读取核1第1路AI
            this.textBox_GetExtAo.Text = Math.Round(poutval, 1).ToString();
            this.textBox_GetExtAi.Text = Math.Round(pinval, 1).ToString();
        }

        private void radOldahead_CheckedChanged(object sender, EventArgs e)
        {
            
        }
                    
        private void IDC_radNewahead_CheckedChanged(object sender, EventArgs e)
        {
         

        }

    }
}
