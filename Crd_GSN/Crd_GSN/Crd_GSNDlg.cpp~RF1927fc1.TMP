
// Crd_GSNDlg.cpp : implementation file
//

#include "stdafx.h"
#include "Crd_GSN.h"
#include "Crd_GSNDlg.h"
#include "afxdialogex.h"
#include "gts.h"
#include "inner.h"
#include "ringnet.h"
#include "LookAheadEx.h"

#pragma comment(lib,"gts.lib")

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

bool aHead = false;
// CAboutDlg dialog used for App About

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// Dialog Data
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support

// Implementation
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CCrd_GSNDlg dialog



CCrd_GSNDlg::CCrd_GSNDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CCrd_GSNDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

void CCrd_GSNDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_CHECK_WATCH, m_CWatch);
}

BEGIN_MESSAGE_MAP(CCrd_GSNDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDC_BUTTON_INITIAL, &CCrd_GSNDlg::OnBnClickedButtonInitial)
	ON_BN_CLICKED(IDC_BUTTON_INITIAL_COORDINATE, &CCrd_GSNDlg::OnBnClickedButtonInitialCoordinate)
	ON_BN_CLICKED(IDC_CHECK_OLDAHEAD, &CCrd_GSNDlg::OnBnClickedCheckOldahead)
	ON_BN_CLICKED(IDC_CHECK_NEHEAD, &CCrd_GSNDlg::OnBnClickedCheckNehead)
	ON_BN_CLICKED(IDC_BUTTON_CRDSTART, &CCrd_GSNDlg::OnBnClickedButtonCrdstart)
	ON_WM_TIMER()
	ON_BN_CLICKED(IDC_CHECK_POSCOMPARE, &CCrd_GSNDlg::OnBnClickedCheckPoscompare)
	ON_BN_CLICKED(IDC_CHECK_WATCH, &CCrd_GSNDlg::OnBnClickedCheckWatch)
END_MESSAGE_MAP()


// CCrd_GSNDlg message handlers

BOOL CCrd_GSNDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// Add "About..." menu item to system menu.

	// IDM_ABOUTBOX must be in the system command range.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// Set the icon for this dialog.  The framework does this automatically
	//  when the application's main window is not a dialog
	SetIcon(m_hIcon, TRUE);			// Set big icon
	SetIcon(m_hIcon, FALSE);		// Set small icon

	// TODO: Add extra initialization here

	return TRUE;  // return TRUE  unless you set the focus to a control
}

void CCrd_GSNDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CCrd_GSNDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // device context for painting

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// Center icon in client rectangle
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// Draw the icon
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// The system calls this function to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CCrd_GSNDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CCrd_GSNDlg::OnBnClickedButtonInitial()
{
	short rtn;
	short i;

	rtn = GTN_Open();								// 打开运动控制器
	rtn = GTN_Reset(1);                            // 复位运动控制器
	rtn = GTN_LoadConfig(1, "test.cfg");           // 下载控制器配置文件
	rtn = GTN_ClrSts(1, 1, 4);                     // 清除1~4轴的轴状态

	for (i = 1; i <= 4; ++i)
	{
		rtn = GTN_AxisOn(1, i);                     // 使能运动轴
	}
}


void CCrd_GSNDlg::OnBnClickedButtonInitialCoordinate()
{
	short rtn;
	TCrdPrm crdPrm;

	memset(&crdPrm, 0, sizeof(crdPrm));
	crdPrm.dimension = 3;                        // 建立三维的坐标系
	crdPrm.synVelMax = 500;                      // 坐标系的最大合成速度是: 500 pulse/ms
	crdPrm.synAccMax = 2;                        // 坐标系的最大合成加速度是: 2 pulse/ms^2
	crdPrm.evenTime = 0;                         // 坐标系的最小匀速时间为0
	crdPrm.profile[0] = 1;                       // 规划器1对应到X轴                       
	crdPrm.profile[1] = 2;                       // 规划器2对应到Y轴
	crdPrm.profile[2] = 3;
	crdPrm.profile[3] = 0;
	crdPrm.profile[4] = 0;
	crdPrm.profile[5] = 0;
	crdPrm.profile[6] = 0;
	crdPrm.profile[7] = 0;
	crdPrm.setOriginFlag = 1;                    // 需要设置加工坐标系原点位置
	crdPrm.originPos[0] = 0;                     // 加工坐标系原点位置在(0,0)，即与机床坐标系原点重合
	crdPrm.originPos[1] = 0;
	crdPrm.originPos[2] = 0;
	crdPrm.originPos[3] = 0;
	crdPrm.originPos[4] = 0;
	crdPrm.originPos[5] = 0;
	crdPrm.originPos[6] = 0;
	crdPrm.originPos[7] = 0;

	rtn = GTN_SetCrdPrm(1, 1, &crdPrm);
}


void CCrd_GSNDlg::OnBnClickedCheckOldahead()
{
	short rtn;
	TCrdData crdData[200];// 定义前瞻缓存区内存区
	rtn = GT_InitLookAhead(1, 0, 5, 1, 200, crdData);// 初始化坐标系1的FIFO0的前瞻模块
	aHead = false;
}


void CCrd_GSNDlg::OnBnClickedCheckNehead()
{
	short rtn;
	int i;
	short core = 1;
	short crd = 1;
	short fifo = 0;
	int lookAheadNum = 200;
	CString strMsg;
	//*****************************************************新前瞻标准使用方法*************************************************************
	//初始化多轴前瞻模块

	EMachineMode machineMode;  //机床类型
	EVelSettingDef velDefineMode; //速度定义模式
	int axisLimitMode[8]; //轴限制模式
	EWorkLimitMode workLimitMode;  //工件坐标系限制模式
	int axisFollowMode[8]; //轴跟随模式
	TLookAheadParameter lookAheadPara;  //前瞻参数

	machineMode = NORMAL_THREE_AXIS; //标准三轴机床
	velDefineMode = NORMAL_DEF_VEL; //输入速度为三轴合成速度
	workLimitMode = WORK_LIMIT_VALID; //工件坐标系限制生效
	for (int i = 0; i < 8; ++i)
	{
		axisLimitMode[i] = AXIS_LIMIT_NONE; //轴限制不生效
		axisFollowMode[i] = 0; //非跟随轴
	}

	lookAheadPara.lookAheadNum = lookAheadNum;
	lookAheadPara.time = 1;//时间常数
	lookAheadPara.radiusRatio = 50;//曲率参数
	for (int i = 0; i < 8; ++i)
	{
		lookAheadPara.vMax[i] = 5000;	//轴最大速度限制
		lookAheadPara.aMax[i] = 100;//轴最大加速度限制
		lookAheadPara.DVMax[i] = 500;//轴跳变速度限制
		lookAheadPara.axisRelation[i] = i + 1;	//坐标系轴与前瞻轴一一映射
		lookAheadPara.scale[i] = 1000;	//脉冲当量
	}

	rtn = GTN_SetupLookAheadCrd(core, crd, machineMode);//设置机床模式
	rtn += GTN_SetAxisFollowModeLa(core, crd, axisFollowMode);//设置跟随模式
	rtn += GTN_SetAxisLimitModeLa(core, crd, axisLimitMode);//设置轴限制模式
	rtn += GTN_SetAxisVelValidModeLa(core, crd, 0xF);//设置轴速度有效，按位设置，0xF表示前4个轴
	rtn += GTN_InitLookAheadEx(core, crd, &lookAheadPara, fifo, 0); //设置前瞻参数（需要放在最后设置）
	if (rtn != 0)
	{
		strMsg.Format(_T("%d"), rtn);
		MessageBox(_T("前瞻初始化错误：") + strMsg);
	}
	aHead = true;
}


void CCrd_GSNDlg::OnBnClickedButtonCrdstart()
{
	short rtn;
	short core = 1;
	if (aHead = false)
	{
		rtn = GTN_LnXY(core, 1, 0, 20000, 10, 1, 0, 0);								 //压入第一段位置指令 
		rtn = GTN_LnXY(core, 1, 20000, 20000, 10, 1, 0, 0);                           //压入第二段位置指令 
		rtn = GTN_LnXY(core, 1, 20000, 0, 10, 1, 0, 0);								 //压入第三段位置指令  
		rtn = GTN_LnXY(core, 1, 0, 0, 10, 1, 0, 0);									//压入第四段位置指令
		rtn = GTN_LnXY(core, 1, 40000, 40000, 10, 1, 0, 0);							//压入第四段位置指令
		rtn = GTN_CrdData(core, 1, NULL, 0);									//将前瞻缓存区中的数据压入控制器
	}
	else
	{
		rtn = GTN_LnXYEx(core, 1, 0, 20000, 10, 1, 0, 0);								 //压入第一段位置指令 
		rtn = GTN_LnXYEx(core, 1, 20000, 20000, 10, 1, 0, 0);                           //压入第二段位置指令 
		rtn = GTN_LnXYEx(core, 1, 20000, 0, 10, 1, 0, 0);								 //压入第三段位置指令  
		rtn = GTN_LnXYEx(core, 1, 0, 0, 10, 1, 0, 0);									//压入第四段位置指令
		rtn = GTN_LnXYEx(core, 1, 40000, 40000, 10, 1, 0, 0);							//压入第四段位置指令
		rtn = GTN_CrdDataEx(core, 1, NULL, 0);									//将前瞻缓存区中的数据压入控制器
	}
	rtn = GTN_CrdStart(1, 1, 0);                                         //启动插补运动
}


void CCrd_GSNDlg::OnTimer(UINT_PTR nIDEvent)
{
	// TODO: Add your message handler code here and/or call default
	short rtn;
	double prfPos[4];
	short run;
	long segment;
	CString strTemp;

	rtn = GT_GetPrfPos(1, prfPos,4,NULL);							// 读1~4轴的规划位置
	strTemp.Format(_T("%.3f"), prfPos[0]);
	SetDlgItemText(IDC_STATIC_PRFPOS_1, strTemp);
	strTemp.Format(_T("%.3f"), prfPos[1]);
	SetDlgItemText(IDC_STATIC_PRFPOS_2, strTemp);
	strTemp.Format(_T("%.3f"), prfPos[2]);
	SetDlgItemText(IDC_STATIC_PRFPOS_3, strTemp);
	strTemp.Format(_T("%.3f"), prfPos[3]);
	SetDlgItemText(IDC_STATIC_PRFPOS_4, strTemp);
	
	rtn = GT_CrdStatus(1, &run, &segment, 0);				// 读取坐标系运动状态
	if (run == 0)
	{
		strTemp.Format(_T("静止"));
	}
	else
	{
		strTemp.Format(_T("运动"));
	}
	SetDlgItemText(IDC_STATIC_CRD_STATUS, strTemp);
	strTemp.Format(_T("%ld"), segment);
	SetDlgItemText(IDC_STATIC_SEGMENT, strTemp);

	CDialogEx::OnTimer(nIDEvent);
}


void CCrd_GSNDlg::OnBnClickedCheckPoscompare()
{
	// 设置位置比较输出参数 
	short rtn;
	short index = 1;
	short core = 1;

	//设置控制权
	short pPermit[16];
	short permit;
	rtn = GTN_GetTerminalPermitEx(core, 1, MC_HSO, &permit, 1, 1);
	permit = 0x2;
	rtn = GTN_SetTerminalPermitEx(core, 1, MC_HSO, &permit, 1, 1);
	//设置位置比较输出模式
	TPosCompareMode prm;
	rtn = GTN_PosCompareClear(core, index); //清空位置比较输出数据
	//设置位置比较输出参数
	TPosCompareMode mode;
	rtn = GTN_GetPosCompareMode(core, index, &mode);
	mode.mode = 2;
	mode.dimension = 2; //2维模式
	mode.sourceMode = 0; //输出比较源，0:编码器，1：脉冲计数器
	mode.sourceX = 1; //X轴比较源[1,12]
	mode.sourceY = 2; //Y轴比较源[1,12]
	mode.outputMode = 0; //0：输出脉冲，：输出电平
	mode.outputCounter = 1; //保留，需要大于0.
	mode.outputPulseWidth = 100; //输出脉冲宽度，单位：.1ms,电平模式下该参数无效
	mode.errorBand = 50;
	rtn = GTN_SetPosCompareMode(core, index, &mode);
	if (rtn)
	{
		printf("GTN_SetPosCompareMode=%d\n", rtn);
	}
	//设置等间距输出相关参数
	TPosComparePsoPrm psoPrm;
	rtn = GTN_GetPosComparePsoPrm(core, index, &psoPrm);
	psoPrm.count = 1; //输出个数，暂时保留，使用时可以先写
	psoPrm.syncPos = 6; //输出间距，X、Y的合成距离，单位：Pulse
	rtn = GTN_SetPosComparePsoPrm(core, index, &psoPrm);
	//启动位置比较输出
	rtn = GTN_PosCompareStart(core, index);
}


void CCrd_GSNDlg::OnBnClickedCheckWatch()
{
	if (m_CWatch.GetCheck() == 1)
	{
		short sRtn;
		short CORE = 1;
		sRtn = GTN_ClearWatch(1, 0);

		TWatchVar wVar;
	}
	else
	{
		//GetDlgItem(IDC_BUTTON_ICAPTURE)->EnableWindow(FALSE);
	}
}
